#!/usr/bin/env python
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# This code is an analysis module for WAD-QC 2.0: a server for automated 
# analysis of medical images for quality control.
#
# The WAD-QC Software can be found on 
# https://bitbucket.org/MedPhysNL/wadqc/wiki/Home
#
# Description:
# This plugin parses the daily QC report (XML format) generated by the Siemens biograph TOF PET-CT.
# To send the data from the scanner to dcm4chee a separate tool that has to be installed on the scanner has been developed by Rob van Rooij and Dennis Dickerscheid.
from __future__ import print_function

__version__ = '01062015'
__author__ = 'DD'


try:
    import pydicom as dicom
    from pydicom import tag
except ImportError:
    import dicom
    from dicom import tag
    
import lxml.etree as etree

from wad_qc.module import pyWADinput
from wad_qc.modulelibs import wadwrapper_lib # for acqdatetime


def acqdatetime_series(data, results, action):
    """
    Read acqdatetime from dicomheaders and write to IQC database
    """

    dcmInfile = dicom.read_file(data.series_filelist[0][0], stop_before_pixels=True)
    dt = wadwrapper_lib.acqdatetime_series(dcmInfile)

    results.addDateTime('AcquisitionDateTime', dt) 
    

def parseqcreport(data,results,action):

    try:
        params = action['params']
    except KeyError:
        params = {}

       
    private_tag = params.get('use_private_tag').split(',')

    relevantfile = data.getAllInstances()[0]
    
    xmltext = relevantfile[tag.Tag(private_tag)]

    root = etree.fromstring(xmltext.value)

    #Sections:
    #Title
    title = root.find('aTitle')
    #Scandate
    scandate = root.find('bScandate')

    #Phantomparameters
    phantompars = root.find('cPhantomParameters')
    
    Isotope = phantompars.find('aIsotope').text
    results.addString('Isotope',Isotope)

    AssayActivity = phantompars.find('bAssayActivity').find('aValue').text
    #+phantompars.find('bAssayActivity').find('bMeasure').text
    results.addFloat('AssayActivity',AssayActivity)

    AssayDatetime = phantompars.find('cAssayDateTime').text
    results.addString('AssayDateTime',AssayDatetime)

    Volume = phantompars.find('dVolume').find('aValue').text
    results.addFloat('Volume',Volume)

    CalibrationFactor = phantompars.find('eCalibrationFactor').text
    results.addFloat('CalibrationFactor',CalibrationFactor)

    #Inputforcomputation
    compinput = root.find('dInputforComputation')



    SWversion = compinput.find('eICSSWVersion').text
    results.addString('Software version',SWversion)
    Gantrytype =compinput.find('fSystemType').text
    results.addString('Gantry type',Gantrytype)
    DailySinogram = compinput.find('aDailySinoLocation').text
    results.addString('Sinogram location',DailySinogram)
    ProposedECFval = compinput.find('bProposedECFValue').find('aValue').text
    results.addFloat('Proposed ECF',ProposedECFval)

    LastPartialSetup = compinput.find('cLastSuccessfulSetup').find('LastSetupDateTime').text
    results.addString('Last partial setup',LastPartialSetup)
    LastPartialSetupState = compinput.find('cLastSuccessfulSetup').find('LastSetupState').text
    results.addString('Last partial setup state',LastPartialSetupState)

    LastFullSetup = compinput.find('hLastSuccessfulSetup').find('LastSetupDateTime').text
    results.addString('Last full setup',LastPartialSetup)
    LastFullSetupState = compinput.find('hLastSuccessfulSetup').find('LastSetupState').text
    results.addString('Last full setup state',LastPartialSetupState)


    Partialsetupenabled = compinput.find('gPartialSetupEnabled').text
    results.addString('Partial setup enabled',Partialsetupenabled)
    ICSname =compinput.find('dICSName').text
    results.addString('ICS name',ICSname)
    

    #Results
    sectionresults = root.find('eResults')

    SystemQualityResults = sectionresults.find('aSystemQualityResults').text
    results.addString('System Quality Results',SystemQualityResults)
    QCPhantomActivity = sectionresults.find('aPhantomAgeResult').text
    results.addString('QC Phantom Activity',QCPhantomActivity)
    

    #DetailedQCreport
    detres = root.find('fDetailedSystemQualityReport').find('aItem')

    BlockNoise = detres.find('aBlockNoise').find('cBlkValue').find('aValue').text
    results.addFloat('Block Noise',BlockNoise)
    BlockEfficiency =detres.find('bBlockEfficiency').find('cBlkValue').find('aValue').text
    results.addFloat('Block Efficiency',BlockEfficiency)
    MeasuredRandoms = detres.find('cMeasureRandoms').find('cBlkValue').find('aValue').text
    results.addFloat('Measured Randoms',MeasuredRandoms)
    ScannerEfficiency = detres.find('dScannerEfficiency').find('cBlkValue').find('aValue').text
    results.addFloat('Scanner Efficiency',ScannerEfficiency)
    ScatterRatio = detres.find('eScatterRatio').find('cBlkValue').find('aValue').text
    results.addFloat('Scatter Ratio',ScatterRatio)
    ECF = detres.find('fECF').find('cBlkValue').find('aValue').text
    results.addFloat('ECF',ECF)
    ImagePlaneEfficiency = detres.find('gPlaneEff').find('cBlkValue').find('aValue').text
    results.addFloat('Plane efficiency',ImagePlaneEfficiency)
    BlockTimingOffset = detres.find('hTimeAlignment').find('cBlkValue').find('aValue').text
    results.addFloat('BlockTimingOffset',BlockTimingOffset)
    BlockTimingWidth = detres.find('iTAFWHM').find('cBlkValue').find('aValue').text
    results.addFloat('BlockTimingWidth',BlockTimingWidth)
    TimeAlignmentResidual =  detres.find('lTAResidual').find('cBlkValue').find('aValue').text
    results.addFloat('Time alignment residual',TimeAlignmentResidual)


if __name__ == "__main__":
    data, results, config = pyWADinput()

    for name,action in config['actions'].items():
        if name == 'acqdatetime':
            acqdatetime_series(data, results, action)
        elif name == 'parse':
            parseqcreport(data, results, action)

    results.write()
